Iterators:
https://stackoverflow.com/questions/8054273/how-to-implement-an-stl-style-iterator-and-avoid-common-pitfalls 

Writing a custom iterator in modern C++:
https://internalpointers.com/post/writing-custom-iterators-modern-cpp

from here - How to Use Tag Dispatching In Your Code Effectively:
https://www.fluentcpp.com/2018/04/27/tag-dispatching/

iterator traits:
https://www.codeproject.com/Articles/36530/An-Introduction-to-Iterator-Traits
https://en.cppreference.com/w/cpp/iterator/iterator_traits
https://stackoverflow.com/questions/6742008/what-are-the-typical-use-cases-of-an-iterator-trait
https://stackoverflow.com/questions/3967996/how-to-retrieve-value-type-from-iterator-in-c

when self-assignment check in assignment operator needed or not needed:
https://stackoverflow.com/questions/57672592/should-an-stl-container-avoid-copying-elements-into-themselves-when-the-containe/57676637#57676637
and here about self-assignment check:
https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c62-make-copy-assignment-safe-for-self-assignment

self-assignment check replaced by swap operations:
https://stackoverflow.com/questions/12015156/what-is-wrong-with-checking-for-self-assignment-and-what-does-it-mean

difference between vector fill and range constructors (need to implement enable_if, is_iterator< is_integral etc)
https://stackoverflow.com/questions/21042872/how-to-implement-fill-constructor-and-range-constructor-for-sequence-containers
https://stackoverflow.com/questions/45847787/how-to-differentiate-fill-constructor-and-range-constructor-in-c11

_Is_iterator. The source is available, and it's basically just a static test that the type isn't an integral type. There's a whole lot of boilerplate code backing it up, but it's all standard C++.

implementing Is_input_iterator(checking if the type is iterable, dereferencable and comparable):
https://stackoverflow.com/questions/4335962/how-to-check-if-a-template-parameter-is-an-iterator-type-or-not

How is std::is_integral implemented?
https://stackoverflow.com/questions/43571962/how-is-stdis-integral-implemented

reserve implementation:
https://stackoverflow.com/questions/34821661/reserve-implementation-for-stdvector-in-stl?rq=1

Strong exception guarantee VS basic exception guarantee: (how to deal with exceptions that might be possibly thrown by an allocator):
https://stackoverflow.com/questions/12137555/strong-exception-guarantee-vs-basic-exception-guarantee